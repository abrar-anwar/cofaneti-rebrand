<style>
  .scroll-hero {
    position: relative;
    height: 100vh;
    overflow: hidden;
  }

  .scroll-container {
    height: 100vh;
    overflow-y: scroll;
    scroll-snap-type: y mandatory;
  }

  .hero-overlay {
    position: absolute;
    top: 0;
    height: 100vh;
    width: 100%;
    display: flex;
    align-items: flex-end;
    justify-content: center;
    padding-bottom: 150px;
    pointer-events: none;
    z-index: {{ section.blocks.size | plus: 1 }};
  }

  .hero-overlay > * {
    pointer-events: auto;
  }

  .scroll-slide {
    height: 100vh;
    scroll-snap-align: start;
    position: relative;
    background-size: cover;
    background-position: center;
    background-attachment: scroll;
    display:block !important;
    position: relative;
  }

  .slide_info {
    position: absolute;
    top: 35%;
    left: 12%;
    color: #fff;
    max-width: 360px;
  }

  .slide_info h1 {
    margin: 0;
    color: #fff;
    font-size: 58px;
  }

  .slide_info p {
    margin: 0;
    font-size: 18px;
    margin-top: -10px;
  }

  @media (max-width: 767px) {
    {% for block in section.blocks %}
      .slide-{{ forloop.index }} {
        background-image: url({{ block.settings.mobile_image | image_url: width: 768 }}) !important;
      }
    {% endfor %}
  }
</style>

<section class="scroll-hero">
  <div class="scroll-container">
    {% for block in section.blocks %}
      <div
        class="scroll-slide slide-{{ forloop.index }}"
        style="background-image: url({{ block.settings.image | image_url: width: 1600 }});"
      >
        <div class="slide_info">
          <h1>{{ block.settings.heading }}</h1>
          <p>{{ block.settings.Text }}</p>
        </div>
      </div>
    {% endfor %}
    <div class="hero-overlay">
      {%- render 'search' -%}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const heroSection = document.querySelector('.scroll-hero');
    const overlay = document.querySelector('.hero-overlay');

    function checkOverlayVisibility() {
      const heroRect = heroSection.getBoundingClientRect();
      const isVisible = heroRect.bottom > 0 && heroRect.top < window.innerHeight;

      overlay.style.opacity = isVisible ? '1' : '0';
      overlay.style.pointerEvents = isVisible ? 'none' : 'none';
    }

    checkOverlayVisibility();
    window.addEventListener('scroll', checkOverlayVisibility, { passive: true });
  });
</script>

{% schema %}
{
  "name": "Hero scrolling section",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "limit": 5,
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Desktop Image"
        },
        {
          "type": "image_picker",
          "id": "mobile_image",
          "label": "Mobile Image"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Headinng",
          "default": "Editions"
        },
        {
          "type": "text",
          "id": "Text",
          "label": "Text",
          "default": "Cofaneti"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Hero scrolling section",
      "blocks": [
        {
          "type": "slide"
        },
        {
          "type": "slide"
        }
      ]
    }
  ]
}
{% endschema %}
